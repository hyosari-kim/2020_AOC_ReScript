// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Curry = require("rescript/lib/js/curry.js");
var Caml_obj = require("rescript/lib/js/caml_obj.js");
var Belt_List = require("rescript/lib/js/belt_List.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Belt_Float = require("rescript/lib/js/belt_Float.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");
var Caml_option = require("rescript/lib/js/caml_option.js");

var input = Fs.readFileSync("../input/Week5/Year2020Day9.txt", "utf8");

function map2(a, b, f) {
  return Belt_Option.flatMap(a, (function (a$p) {
                return Belt_Option.map(b, (function (b$p) {
                              return Curry._2(f, a$p, b$p);
                            }));
              }));
}

function traverse(l) {
  return Belt_Option.map(Belt_List.reduce(l, /* [] */0, (function (acc, a) {
                    return map2(a, acc, (function (a$p, acc$p) {
                                  return Belt_List.add(acc$p, a$p);
                                }));
                  })), Belt_List.reverse);
}

var numbers = Belt_Option.getWithDefault(traverse(Belt_List.fromArray(Belt_Array.map(input.split("\n"), Belt_Float.fromString))), /* [] */0);

function xMas(pre, i) {
  var _l = pre;
  while(true) {
    var l = _l;
    if (!l) {
      return /* Failed */{
              _0: i
            };
    }
    var tail = l.tl;
    var head = l.hd;
    var match = Belt_List.size(Belt_List.keep(tail, (function(head){
            return function (t) {
              return head + t === i;
            }
            }(head))));
    if (match !== 0) {
      return /* Succeed */0;
    }
    _l = tail;
    continue ;
  };
}

function findWeakness(data, preambleLength) {
  var preamble = Belt_List.take(data, preambleLength);
  var after = Belt_List.get(data, preambleLength);
  return Belt_Option.flatMap(map2(preamble, after, xMas), (function (result) {
                if (result) {
                  return result._0;
                } else if (data) {
                  return findWeakness(data.tl, preambleLength);
                } else {
                  return ;
                }
              }));
}

var result = findWeakness(numbers, 25);

if (result !== undefined) {
  console.log(result);
} else {
  console.log("Something wrong");
}

function seqSum(seq, acc, a) {
  return [
          Belt_List.concat(seq, {
                hd: a,
                tl: /* [] */0
              }),
          a + acc
        ];
}

function dropFirst(l, acc) {
  var acc$p = Belt_Option.getWithDefault(Belt_Option.map(Belt_List.head(l), (function (h) {
              return acc - h;
            })), 0);
  var l$p = Belt_Option.getWithDefault(Belt_List.drop(l, 1), /* [] */0);
  return [
          l$p,
          acc$p
        ];
}

function compareWeakness(acc, weakness) {
  if (Caml_obj.caml_lessthan(acc, weakness)) {
    return /* Low */0;
  } else if (Caml_obj.caml_equal(acc, weakness)) {
    return /* Equal */1;
  } else {
    return /* High */2;
  }
}

function findSequence(data, weakness) {
  var _l = data;
  var _seq = /* [] */0;
  var _acc = 0;
  while(true) {
    var acc = _acc;
    var seq = _seq;
    var l = _l;
    var match = compareWeakness(acc, weakness);
    switch (match) {
      case /* Low */0 :
          if (!l) {
            return ;
          }
          var match$1 = seqSum(seq, acc, l.hd);
          _acc = match$1[1];
          _seq = match$1[0];
          _l = l.tl;
          continue ;
      case /* Equal */1 :
          return seq;
      case /* High */2 :
          var match$2 = dropFirst(seq, acc);
          _acc = match$2[1];
          _seq = match$2[0];
          continue ;
      
    }
  };
}

function cmp(f, seq) {
  return Belt_List.reduce(seq, undefined, (function (acc, i) {
                if (acc !== undefined) {
                  return Caml_option.some(Curry._2(f, Caml_option.valFromOption(acc), i));
                } else {
                  return Caml_option.some(i);
                }
              }));
}

function min(param) {
  return cmp((function (acc, i) {
                if (acc > i) {
                  return i;
                } else {
                  return acc;
                }
              }), param);
}

function max(param) {
  return cmp((function (acc, i) {
                if (acc < i) {
                  return i;
                } else {
                  return acc;
                }
              }), param);
}

var result$1 = Belt_Option.flatMap(Belt_Option.flatMap(findWeakness(numbers, 25), (function (weakness) {
            return findSequence(numbers, weakness);
          })), (function (seq) {
        return map2(min(seq), max(seq), (function (a, b) {
                      return a + b;
                    }));
      }));

if (result$1 !== undefined) {
  console.log(result$1);
} else {
  console.log("Something wrong");
}

var preambleLength = 25;

exports.input = input;
exports.map2 = map2;
exports.traverse = traverse;
exports.numbers = numbers;
exports.xMas = xMas;
exports.findWeakness = findWeakness;
exports.seqSum = seqSum;
exports.dropFirst = dropFirst;
exports.compareWeakness = compareWeakness;
exports.findSequence = findSequence;
exports.cmp = cmp;
exports.min = min;
exports.max = max;
exports.preambleLength = preambleLength;
exports.result = result$1;
/* input Not a pure module */
