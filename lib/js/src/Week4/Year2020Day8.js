// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Belt_Int = require("rescript/lib/js/belt_Int.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");

var input = Fs.readFileSync("input/Week4/Year2020Day8.txt", "utf8");

function parser(input$p) {
  return Belt_Array.keepMap(input$p.split("\n"), (function (i) {
                var match = i.split(" ");
                if (match.length !== 2) {
                  return ;
                }
                var instruction = match[0];
                var value = match[1];
                var value$p = Belt_Int.fromString(value);
                if (value$p === undefined) {
                  return ;
                }
                switch (instruction) {
                  case "acc" :
                      return [
                              /* Acc */1,
                              value$p,
                              false
                            ];
                  case "jmp" :
                      return [
                              /* Jmp */2,
                              value$p,
                              false
                            ];
                  case "nop" :
                      return [
                              /* Nop */0,
                              value$p,
                              false
                            ];
                  default:
                    return ;
                }
              }));
}

function update(instructions, nextIndex) {
  var match = Belt_Array.get(instructions, nextIndex);
  if (match !== undefined) {
    return Belt_Array.concatMany([
                Belt_Array.slice(instructions, 0, nextIndex),
                [[
                    match[0],
                    match[1],
                    true
                  ]],
                Belt_Array.sliceToEnd(instructions, nextIndex + 1 | 0)
              ]);
  } else {
    return instructions;
  }
}

function next(param) {
  var instructions = param.instructions;
  var nextIndex = param.nextIndex;
  var accumulator = param.accumulator;
  var match = Belt_Array.get(instructions, nextIndex);
  if (match === undefined) {
    return {
            accumulator: accumulator,
            nextIndex: nextIndex,
            instructions: instructions
          };
  }
  if (match[2]) {
    return {
            accumulator: accumulator,
            nextIndex: -1,
            instructions: instructions
          };
  }
  switch (match[0]) {
    case /* Nop */0 :
        return {
                accumulator: accumulator,
                nextIndex: nextIndex + 1 | 0,
                instructions: update(instructions, nextIndex)
              };
    case /* Acc */1 :
        return {
                accumulator: accumulator + match[1] | 0,
                nextIndex: nextIndex + 1 | 0,
                instructions: update(instructions, nextIndex)
              };
    case /* Jmp */2 :
        return {
                accumulator: accumulator,
                nextIndex: nextIndex + match[1] | 0,
                instructions: update(instructions, nextIndex)
              };
    
  }
}

var inst = parser(input);

var state = {
  accumulator: 0,
  nextIndex: 0,
  instructions: inst
};

function findInfinLoop(_state) {
  while(true) {
    var state = _state;
    var state$p = next(state);
    if (state$p.nextIndex === -1) {
      return state$p;
    }
    _state = state$p;
    continue ;
  };
}

console.log(findInfinLoop(state));

exports.input = input;
exports.parser = parser;
exports.update = update;
exports.next = next;
exports.inst = inst;
exports.state = state;
exports.findInfinLoop = findInfinLoop;
/* input Not a pure module */
