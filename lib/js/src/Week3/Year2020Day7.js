// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Belt_Int = require("rescript/lib/js/belt_Int.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");
var Caml_option = require("rescript/lib/js/caml_option.js");

var input = Fs.readFileSync("input/Week3/Year2020Day7.txt", "utf8");

function parse(row) {
  var key = row.match(/^\w+\s+\w+ bags/);
  var bags = row.match(/\d+\s+\w+\s+\w+/g);
  if (key !== null) {
    return {
            key: Belt_Array.getExn(key, 0).replace(" bags", ""),
            bags: Belt_Option.map(bags === null ? undefined : Caml_option.some(bags), (function (arr) {
                    return Belt_Array.keepMap(Belt_Array.map(Belt_Array.keepMap(arr, (function (bag) {
                                          return Caml_option.null_to_opt(bag.match(/^(\d+) (\w+\s+\w+)/));
                                        })), (function (bag) {
                                      return Belt_Array.sliceToEnd(bag, 1);
                                    })), (function (bag) {
                                  if (bag.length !== 2) {
                                    return ;
                                  }
                                  var num = bag[0];
                                  var name = bag[1];
                                  var n = Belt_Int.fromString(num);
                                  if (n !== undefined) {
                                    return [
                                            n,
                                            name
                                          ];
                                  }
                                  
                                }));
                  }))
          };
  }
  
}

var rules = Belt_Array.keepMap(input.split("\n"), parse);

var keyword = "shiny gold";

function search(rule, keyword) {
  var bags = rule.bags;
  if (bags !== undefined) {
    return Belt_Array.reduce(bags, 0, (function (acc, bag) {
                  var name = bag[1];
                  return acc + (
                          name === keyword ? 1 : search(Belt_Array.getExn(Belt_Array.keep(rules, (function (r) {
                                            return r.key === name;
                                          })), 0), keyword)
                        ) | 0;
                }));
  } else {
    return 0;
  }
}

console.log(Belt_Array.keep(Belt_Array.map(rules, (function (r) {
                if (r.key === keyword) {
                  return 1;
                } else {
                  return search(r, keyword);
                }
              })), (function (a) {
            return a > 0;
          })).length - 1 | 0);

function search2(rule) {
  var bags = rule.bags;
  if (bags !== undefined) {
    return Belt_Array.reduce(bags, 0, (function (acc, bag) {
                  var name = bag[1];
                  var cnt = bag[0];
                  return (acc + cnt | 0) + Math.imul(cnt, search2(Belt_Array.getExn(Belt_Array.keep(rules, (function (r) {
                                            return r.key === name;
                                          })), 0))) | 0;
                }));
  } else {
    return 0;
  }
}

var sg = Belt_Array.getExn(Belt_Array.keep(rules, (function (r) {
            return r.key === keyword;
          })), 0);

console.log(search2(sg));

exports.input = input;
exports.parse = parse;
exports.rules = rules;
exports.keyword = keyword;
exports.search = search;
exports.search2 = search2;
exports.sg = sg;
/* input Not a pure module */
