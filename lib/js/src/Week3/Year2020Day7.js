// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Belt_Int = require("rescript/lib/js/belt_Int.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");
var Caml_option = require("rescript/lib/js/caml_option.js");

var input = Fs.readFileSync("input/Week3/Year2020Day7.txt", "utf8");

var emptyBag = [
  0,
  ""
];

function parse(row) {
  var key = row.match(/^\w+\s+\w+ bags/);
  var bags = row.match(/(\d+|no)\s+\w+\s+\w+/g);
  if (key !== null && bags !== null) {
    return {
            key: Belt_Array.getExn(key, 0).replace(" bags", ""),
            bags: Belt_Array.keepMap(Belt_Array.map(Belt_Array.keepMap(bags, (function (bag) {
                            return Caml_option.null_to_opt(bag.match(/^(\d+|no) (\w+\s+\w+)/));
                          })), (function (bag) {
                        return Belt_Array.sliceToEnd(bag, 1);
                      })), (function (bag) {
                    if (bag.length !== 2) {
                      return ;
                    }
                    var num = bag[0];
                    var name = bag[1];
                    return Belt_Option.mapWithDefault(Belt_Int.fromString(num), emptyBag, (function (n) {
                                  return [
                                          n,
                                          name
                                        ];
                                }));
                  }))
          };
  }
  
}

var rules = Belt_Array.keepMap(input.split("\n"), parse);

var keyword = "shiny gold";

function search(rule, keyword) {
  return Belt_Array.reduce(rule.bags, 0, (function (acc, bag) {
                var name = bag[1];
                var rule = Belt_Array.get(Belt_Array.keep(rules, (function (r) {
                            return r.key === name;
                          })), 0);
                return acc + (
                        name === keyword ? 1 : Belt_Option.mapWithDefault(rule, 0, (function (r) {
                                  return search(r, keyword);
                                }))
                      ) | 0;
              }));
}

console.log(Belt_Array.keep(Belt_Array.map(rules, (function (r) {
                if (r.key === keyword) {
                  return 1;
                } else {
                  return search(r, keyword);
                }
              })), (function (a) {
            return a > 0;
          })).length - 1 | 0);

function search2(rule) {
  return Belt_Array.reduce(rule.bags, 0, (function (acc, bag) {
                var name = bag[1];
                var cnt = bag[0];
                var rule = Belt_Array.get(Belt_Array.keep(rules, (function (r) {
                            return r.key === name;
                          })), 0);
                return (acc + cnt | 0) + Math.imul(cnt, Belt_Option.mapWithDefault(rule, 0, search2)) | 0;
              }));
}

var sg = Belt_Array.getExn(Belt_Array.keep(rules, (function (r) {
            return r.key === keyword;
          })), 0);

console.log(search2(sg));

exports.input = input;
exports.emptyBag = emptyBag;
exports.parse = parse;
exports.rules = rules;
exports.keyword = keyword;
exports.search = search;
exports.search2 = search2;
exports.sg = sg;
/* input Not a pure module */
