// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Caml_splice_call = require("rescript/lib/js/caml_splice_call.js");

var input = Fs.readFileSync("input/Week1/Year2020Day5.txt", "utf8");

var bPass = Belt_Array.keep(input.split("\n"), (function (b) {
        return b !== "";
      }));

var seatIds = Belt_Array.map(bPass, (function (p) {
        return Belt_Array.reduce(p.split(""), 0, (function (acc, c) {
                      if (c === "B" || c === "R") {
                        return (acc << 1) + 1 | 0;
                      } else {
                        return (acc << 1);
                      }
                    }));
      }));

console.log(Belt_Array.reduce(seatIds, 0, (function (acc, id) {
            if (acc > id) {
              return acc;
            } else {
              return id;
            }
          })));

function getMySeatId(seatIds) {
  var min = Caml_splice_call.spliceApply(Math.min, [seatIds]);
  var max = Caml_splice_call.spliceApply(Math.max, [seatIds]);
  var total = Belt_Array.reduce(Belt_Array.range(min, max), 0, (function (acc, i) {
          return acc + i | 0;
        }));
  var idSum = Belt_Array.reduce(seatIds, 0, (function (acc, i) {
          return acc + i | 0;
        }));
  return total - idSum | 0;
}

console.log(getMySeatId(seatIds));

exports.input = input;
exports.bPass = bPass;
exports.seatIds = seatIds;
exports.getMySeatId = getMySeatId;
/* input Not a pure module */
