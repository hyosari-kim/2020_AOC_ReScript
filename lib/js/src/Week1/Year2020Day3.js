// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Belt_List = require("rescript/lib/js/belt_List.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Caml_int32 = require("rescript/lib/js/caml_int32.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");

var input = Fs.readFileSync("input/Week1/Year2020Day3.txt", "utf8");

var grid = Belt_Array.map(Belt_Array.keep(input.split("\n"), (function (x) {
            return x !== "";
          })), (function (x) {
        return x.split("");
      }));

var height = grid.length;

var width = Belt_Array.getExn(grid, 0).length;

function getTree(forest, param) {
  var y = param[1];
  var t1 = Belt_Array.get(forest, param[0]);
  return Belt_Option.flatMap(t1, (function (line) {
                return Belt_Array.get(line, y);
              }));
}

var road = Belt_Array.map(Belt_Array.range(1, height - 1 | 0), (function (s) {
        return Belt_Array.getExn(Belt_Array.getExn(grid, s), Caml_int32.mod_(Math.imul(s, 3), width));
      }));

var count = Belt_Array.keep(road, (function (x) {
        return x === "#";
      })).length;

console.log(road);

console.log(count);

var step = {
  hd: [
    1,
    1
  ],
  tl: {
    hd: [
      3,
      1
    ],
    tl: {
      hd: [
        5,
        1
      ],
      tl: {
        hd: [
          7,
          1
        ],
        tl: {
          hd: [
            1,
            2
          ],
          tl: /* [] */0
        }
      }
    }
  }
};

var roads = Belt_List.map(step, (function (param) {
        var down = param[1];
        var right = param[0];
        var _r = right;
        var _d = down;
        var _path = [];
        while(true) {
          var path = _path;
          var d = _d;
          var r = _r;
          if (d >= height) {
            return path;
          }
          var n_path = Belt_Array.concat(path, [Belt_Array.getExn(Belt_Array.getExn(grid, d), Caml_int32.mod_(r, width))]);
          _path = n_path;
          _d = d + down | 0;
          _r = r + right | 0;
          continue ;
        };
      }));

var counts = Belt_List.map(roads, (function (r) {
        return Belt_Array.reduce(r, 0, (function (acc, c) {
                      if (c === "#") {
                        return acc + 1 | 0;
                      } else {
                        return acc;
                      }
                    }));
      }));

console.log(Belt_List.reduce(counts, 1.0, (function (acc, c) {
            return acc * c;
          })));

var result;

exports.input = input;
exports.grid = grid;
exports.height = height;
exports.width = width;
exports.getTree = getTree;
exports.road = road;
exports.count = count;
exports.step = step;
exports.roads = roads;
exports.counts = counts;
exports.result = result;
/* input Not a pure module */
