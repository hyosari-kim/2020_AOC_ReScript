// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Curry = require("rescript/lib/js/curry.js");
var Belt_Int = require("rescript/lib/js/belt_Int.js");
var Caml_obj = require("rescript/lib/js/caml_obj.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");

var input = Fs.readFileSync("input/Week2/Year2020Day4.txt", "utf8");

var initPassport = {
  byr: 0,
  iyr: 0,
  eyr: 0,
  hgt: {
    TAG: /* Cm */0,
    _0: 0
  },
  hcl: "",
  ecl: /* None */7,
  pid: "",
  cid: undefined
};

function parsePassport(input) {
  return Belt_Array.map(Belt_Array.map(Belt_Array.map(input.split("\n\n"), (function (p) {
                        return p.split(/[\s,\n]+/);
                      })), (function (p) {
                    return Belt_Array.keep(p, (function (el) {
                                  if (el !== undefined) {
                                    return el !== "";
                                  } else {
                                    return false;
                                  }
                                }));
                  })), (function (p) {
                return Belt_Array.reduce(p, initPassport, (function (acc, el) {
                              if (el === undefined) {
                                return acc;
                              }
                              var match = el.split(":");
                              if (match.length !== 2) {
                                return acc;
                              }
                              var match$1 = match[0];
                              switch (match$1) {
                                case "byr" :
                                    var v = match[1];
                                    return {
                                            byr: Belt_Option.getWithDefault(Belt_Int.fromString(v), 0),
                                            iyr: acc.iyr,
                                            eyr: acc.eyr,
                                            hgt: acc.hgt,
                                            hcl: acc.hcl,
                                            ecl: acc.ecl,
                                            pid: acc.pid,
                                            cid: acc.cid
                                          };
                                case "cid" :
                                    var v$1 = match[1];
                                    return {
                                            byr: acc.byr,
                                            iyr: acc.iyr,
                                            eyr: acc.eyr,
                                            hgt: acc.hgt,
                                            hcl: acc.hcl,
                                            ecl: acc.ecl,
                                            pid: acc.pid,
                                            cid: v$1
                                          };
                                case "ecl" :
                                    var v$2 = match[1];
                                    var tmp;
                                    switch (v$2) {
                                      case "amb" :
                                          tmp = /* Amb */0;
                                          break;
                                      case "blu" :
                                          tmp = /* Blu */1;
                                          break;
                                      case "brn" :
                                          tmp = /* Brn */6;
                                          break;
                                      case "grn" :
                                          tmp = /* Grn */2;
                                          break;
                                      case "gry" :
                                          tmp = /* Gry */3;
                                          break;
                                      case "hzl" :
                                          tmp = /* Hzl */4;
                                          break;
                                      case "oth" :
                                          tmp = /* Oth */5;
                                          break;
                                      default:
                                        tmp = /* None */7;
                                    }
                                    return {
                                            byr: acc.byr,
                                            iyr: acc.iyr,
                                            eyr: acc.eyr,
                                            hgt: acc.hgt,
                                            hcl: acc.hcl,
                                            ecl: tmp,
                                            pid: acc.pid,
                                            cid: acc.cid
                                          };
                                case "eyr" :
                                    var v$3 = match[1];
                                    return {
                                            byr: acc.byr,
                                            iyr: acc.iyr,
                                            eyr: Belt_Option.getWithDefault(Belt_Int.fromString(v$3), 0),
                                            hgt: acc.hgt,
                                            hcl: acc.hcl,
                                            ecl: acc.ecl,
                                            pid: acc.pid,
                                            cid: acc.cid
                                          };
                                case "hcl" :
                                    var v$4 = match[1];
                                    return {
                                            byr: acc.byr,
                                            iyr: acc.iyr,
                                            eyr: acc.eyr,
                                            hgt: acc.hgt,
                                            hcl: v$4,
                                            ecl: acc.ecl,
                                            pid: acc.pid,
                                            cid: acc.cid
                                          };
                                case "hgt" :
                                    var v$5 = match[1];
                                    var match$2 = v$5.slice(-2);
                                    var tmp$1;
                                    switch (match$2) {
                                      case "cm" :
                                          tmp$1 = Belt_Option.getWithDefault(Belt_Option.map(Belt_Int.fromString(v$5.slice(0, -2)), (function (h) {
                                                      return {
                                                              TAG: /* Cm */0,
                                                              _0: h
                                                            };
                                                    })), {
                                                TAG: /* Cm */0,
                                                _0: 0
                                              });
                                          break;
                                      case "in" :
                                          tmp$1 = Belt_Option.getWithDefault(Belt_Option.map(Belt_Int.fromString(v$5.slice(0, -2)), (function (h) {
                                                      return {
                                                              TAG: /* In */1,
                                                              _0: h
                                                            };
                                                    })), {
                                                TAG: /* Cm */0,
                                                _0: 0
                                              });
                                          break;
                                      default:
                                        tmp$1 = {
                                          TAG: /* Cm */0,
                                          _0: 0
                                        };
                                    }
                                    return {
                                            byr: acc.byr,
                                            iyr: acc.iyr,
                                            eyr: acc.eyr,
                                            hgt: tmp$1,
                                            hcl: acc.hcl,
                                            ecl: acc.ecl,
                                            pid: acc.pid,
                                            cid: acc.cid
                                          };
                                case "iyr" :
                                    var v$6 = match[1];
                                    return {
                                            byr: acc.byr,
                                            iyr: Belt_Option.getWithDefault(Belt_Int.fromString(v$6), 0),
                                            eyr: acc.eyr,
                                            hgt: acc.hgt,
                                            hcl: acc.hcl,
                                            ecl: acc.ecl,
                                            pid: acc.pid,
                                            cid: acc.cid
                                          };
                                case "pid" :
                                    var v$7 = match[1];
                                    return {
                                            byr: acc.byr,
                                            iyr: acc.iyr,
                                            eyr: acc.eyr,
                                            hgt: acc.hgt,
                                            hcl: acc.hcl,
                                            ecl: acc.ecl,
                                            pid: v$7,
                                            cid: acc.cid
                                          };
                                default:
                                  return acc;
                              }
                            }));
              }));
}

var passports = parsePassport(input);

console.log(passports);

function countPassport(passports) {
  return Belt_Array.reduce(passports, 0, (function (acc, passport) {
                var hasRequired = passport.byr !== 0 && passport.iyr !== 0 && passport.eyr !== 0 && passport.hgt !== ({
                    TAG: /* Cm */0,
                    _0: 0
                  }) && passport.hcl !== "" && passport.ecl !== /* None */7 && passport.pid !== "";
                if (hasRequired) {
                  return acc + 1 | 0;
                } else {
                  return acc;
                }
              }));
}

console.log(countPassport(passports));

function checkRange(num, min, max) {
  if (Caml_obj.caml_greaterequal(num, min)) {
    return Caml_obj.caml_lessequal(num, max);
  } else {
    return false;
  }
}

function validatePassport(passports) {
  var validator_byr = function (by) {
    return checkRange(by, 1920, 2002);
  };
  var validator_iyr = function (iy) {
    return checkRange(iy, 2010, 2020);
  };
  var validator_eyr = function (ey) {
    return checkRange(ey, 2020, 2030);
  };
  var validator_hgt = function (hg) {
    if (hg.TAG === /* Cm */0) {
      return checkRange(hg._0, 150, 193);
    } else {
      return checkRange(hg._0, 59, 76);
    }
  };
  var validator_hcl = function (hc) {
    var c = hc[0];
    var code = hc.slice(1);
    if (c === "#") {
      return /^[0-9a-f]{6}$/.test(code);
    } else {
      return false;
    }
  };
  var validator_ecl = function (ec) {
    return ec < 7;
  };
  var validator_pid = function (pi) {
    return pi.length === 9;
  };
  return Belt_Array.keep(passports, (function (passport) {
                if (Curry._1(validator_byr, passport.byr) && Curry._1(validator_iyr, passport.iyr) && Curry._1(validator_eyr, passport.eyr) && Curry._1(validator_hgt, passport.hgt) && Curry._1(validator_hcl, passport.hcl) && Curry._1(validator_ecl, passport.ecl)) {
                  return Curry._1(validator_pid, passport.pid);
                } else {
                  return false;
                }
              }));
}

console.log(validatePassport(passports).length);

exports.input = input;
exports.initPassport = initPassport;
exports.parsePassport = parsePassport;
exports.passports = passports;
exports.countPassport = countPassport;
exports.checkRange = checkRange;
exports.validatePassport = validatePassport;
/* input Not a pure module */
