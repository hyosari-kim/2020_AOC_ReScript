// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Belt_Int = require("rescript/lib/js/belt_Int.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");
var Caml_option = require("rescript/lib/js/caml_option.js");

var input = Fs.readFileSync("input/Week2/Year2020Day4.txt", "utf8");

function pick(str, p) {
  var tmp;
  switch (p) {
    case "byr" :
        tmp = Caml_option.null_to_opt(str.match(/byr:(\w+)/));
        break;
    case "cid" :
        tmp = Caml_option.null_to_opt(str.match(/cid:(\w+)/));
        break;
    case "ecl" :
        tmp = Caml_option.null_to_opt(str.match(/ecl:(\w+)/));
        break;
    case "eyr" :
        tmp = Caml_option.null_to_opt(str.match(/eyr:(\w+)/));
        break;
    case "hcl" :
        tmp = Caml_option.null_to_opt(str.match(/hcl:(#\w+)/));
        break;
    case "hgt" :
        tmp = Caml_option.null_to_opt(str.match(/hgt:(\w+)/));
        break;
    case "iyr" :
        tmp = Caml_option.null_to_opt(str.match(/iyr:(\w+)/));
        break;
    case "pid" :
        tmp = Caml_option.null_to_opt(str.match(/pid:(\w+)/));
        break;
    default:
      tmp = undefined;
  }
  return Belt_Option.map(tmp, (function (v) {
                return Belt_Array.getExn(v, 1);
              }));
}

function setHeight(str) {
  var match = str.slice(-2);
  switch (match) {
    case "cm" :
        return Belt_Option.map(Belt_Int.fromString(str.slice(0, -2)), (function (h) {
                      return {
                              TAG: /* Cm */0,
                              _0: h
                            };
                    }));
    case "in" :
        return Belt_Option.map(Belt_Int.fromString(str.slice(0, -2)), (function (h) {
                      return {
                              TAG: /* In */1,
                              _0: h
                            };
                    }));
    default:
      return ;
  }
}

function setEye(str) {
  switch (str) {
    case "amb" :
        return /* Amb */0;
    case "blu" :
        return /* Blu */1;
    case "brn" :
        return /* Brn */6;
    case "grn" :
        return /* Grn */2;
    case "gry" :
        return /* Gry */3;
    case "hzl" :
        return /* Hzl */4;
    case "oth" :
        return /* Oth */5;
    default:
      return ;
  }
}

console.log(Belt_Array.keepMap(input.split("\n\n"), (function (p) {
            var match = Belt_Option.flatMap(pick(p, "byr"), Belt_Int.fromString);
            var match$1 = Belt_Option.flatMap(pick(p, "iyr"), Belt_Int.fromString);
            var match$2 = Belt_Option.flatMap(pick(p, "eyr"), Belt_Int.fromString);
            var match$3 = Belt_Option.flatMap(pick(p, "hgt"), setHeight);
            var match$4 = pick(p, "hcl");
            var match$5 = Belt_Option.flatMap(pick(p, "ecl"), setEye);
            var match$6 = pick(p, "pid");
            var match$7 = pick(p, "cid");
            if (match !== undefined && match$1 !== undefined && match$2 !== undefined && match$3 !== undefined && match$4 !== undefined && match$5 !== undefined && match$6 !== undefined) {
              return {
                      byr: match,
                      iyr: match$1,
                      eyr: match$2,
                      hgt: match$3,
                      hcl: match$4,
                      ecl: match$5,
                      pid: match$6,
                      cid: match$7
                    };
            }
            
          })).length);

exports.input = input;
exports.pick = pick;
exports.setHeight = setHeight;
exports.setEye = setEye;
/* input Not a pure module */
