// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Belt_List = require("rescript/lib/js/belt_List.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Caml_format = require("rescript/lib/js/caml_format.js");

var input = Fs.readFileSync("input/Week2/Year2020Day2.txt", "utf8");

var db = Belt_List.map(Belt_List.map(Belt_List.keep(Belt_List.map(Belt_List.fromArray(input.split("\n")), (function (r) {
                    return Belt_List.fromArray(r.split(":"));
                  })), (function (r) {
                return Belt_List.length(r) === 2;
              })), (function (r) {
            return [
                    Belt_List.getExn(r, 0),
                    Belt_List.getExn(r, 1)
                  ];
          })), (function (r) {
        var p = Belt_List.fromArray(r[0].split(" "));
        var policy;
        if (p) {
          var match = p.tl;
          if (match) {
            policy = {
              p: Belt_List.fromArray(p.hd.split("-")),
              letter: match.hd
            };
          } else {
            throw {
                  RE_EXN_ID: "Match_failure",
                  _1: [
                    "Year2020Day2.res",
                    54,
                    14
                  ],
                  Error: new Error()
                };
          }
        } else {
          throw {
                RE_EXN_ID: "Match_failure",
                _1: [
                  "Year2020Day2.res",
                  54,
                  14
                ],
                Error: new Error()
              };
        }
        return {
                policy: policy,
                pw: r[1].trim()
              };
      }));

console.log(Belt_List.length(Belt_List.keep(db, (function (param) {
                var match = param.policy;
                var letter = match.letter;
                var p = match.p;
                var count = Belt_Array.reduce(param.pw.split(""), 0, (function (acc, c) {
                        if (c === letter) {
                          return acc + 1 | 0;
                        } else {
                          return acc;
                        }
                      }));
                if (!p) {
                  return false;
                }
                var match$1 = p.tl;
                if (match$1 && Caml_format.caml_int_of_string(p.hd) <= count) {
                  return Caml_format.caml_int_of_string(match$1.hd) >= count;
                } else {
                  return false;
                }
              }))));

console.log(Belt_List.length(Belt_List.keep(db, (function (param) {
                var pw = param.pw;
                var match = param.policy;
                var letter = match.letter;
                var positions = match.p;
                if (!positions) {
                  return false;
                }
                var match$1 = positions.tl;
                if (!match$1) {
                  return false;
                }
                var firstPos = Caml_format.caml_int_of_string(positions.hd);
                var lastPos = Caml_format.caml_int_of_string(match$1.hd);
                var isFirstExsists = pw[firstPos - 1 | 0] === letter;
                var isLastExists = pw[lastPos - 1 | 0] === letter;
                if (isFirstExsists || isLastExists) {
                  return !(isFirstExsists && isLastExists);
                } else {
                  return false;
                }
              }))));

exports.input = input;
exports.db = db;
/* input Not a pure module */
